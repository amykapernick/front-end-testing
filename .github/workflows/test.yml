# Name of the Workflow
name: Build and Test

# How the workflow is triggered, in this case every time a pull request to the prod branch gets opened, reopened or the code in the PR gets updated
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [prod]

# The jobs/tasks that the workflow completes, by default these will all run at the same time
# https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow
jobs:
  # Each job gets a different name, eg. `build`, but the name must be unique
  build:
    # Set the platform that the job will run on, you can choose a number of different options, but running on Linux is the cheapest option
    # https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job
    runs-on: ubuntu-22.04
    # Because the testing job is different, we need to out the Netlify URL so we can access it in another job
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
    outputs:
      deploy_url: ${{steps.build_site.outputs.NETLIFY_URL}}
    # Each job has a number of steps to complete (these will complete one after another), most of the time your first step will be to checkout the repo code, otherwise you won't have anything to work with
    steps:
      # Name of the action (this is for us to identify it when it runs)
      - name: Checkout Repo Code
        # The GitHub Action package that we're using in this step, most of the time this is how we'll be defining what a step does
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        # Some actions will also require values/config to be passed in, so these are set under the `with` property
        with:
          # Eg. for the setup node package, it can take a value of which node version you want to use
          # https://github.com/actions/setup-node#supported-version-syntax
          node-version: 20
      - name: Install Node Modules
        # We don't need a actions package to install node modules, instead we can run a command directly in the runner and install them the same way we would in our terminal
        run: npm install
      - name: Deploy to Netlify
        # If we add an ID to our step, it can be referred to elsewhere in our workflow, this ID must be unique
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsid
        id: build_site
        # For this step we also need to use some environment variables, which we're pulling in from GitHub Secrets
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsenv
        env:
          TOKEN: ${{ secrets.TOKEN }}
          SITE_ID: ${{ secrets.SITE_ID }}
        # This step will run a command in the terminal, which runs a custom script we'll create to build and deploy the site
        run: ./.github/actions/netlify_deploy.sh

        # Once the site is build, we're going to use the GitHub Script package to add a comment to our PR, so that we know everything has built and so we can easily find the preview URL if we want to check something
        # https://github.com/actions/github-script
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'The build works! You can view the deploy preview at ${{steps.build_site.outputs.NETLIFY_URL}}'
            })

      - name: Build And Deploy on Azure
        id: azure_builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_AMBITIOUS_GROUND_026E05310 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "dist" # Built app content directory - optional

  # Creating a new job for the tests to run in
  test:
    # Because the website has to have built first, we're defining a dependency on the `needs` property, that the test job needs to have the build job complete first
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: build
    runs-on: ubuntu-22.04
    steps:
      # Jobs run in their own separate environments, so we need to checkout the repo code again so we can run tests that are defined in the repo
      - name: Checkout Repo Code
        uses: actions/checkout@v3

      - run: echo ${{needs.build.outputs.deploy_url}}

      - env:
          OUTPUT: ${{needs.build.outputs.deploy_url}}
        run: echo "$OUTPUT"

      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            "${{ needs.build.outputs.deploy_url }}"
          uploadArtifacts: true
          temporaryPublicStorage: true
